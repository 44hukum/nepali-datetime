import datetime

from typing import Dict, List, Tuple, Any, Union, Callable


FILE_PATH = str
BS_DATE = Dict[str, int]
AD_DATE = Dict[str, int]

BASE_DIR: FILE_PATH
CALENDAR_PATH: FILE_PATH
MIN_DATE: BS_DATE
MAX_DATE: BS_DATE
REFERENCE_DATE_AD: AD_DATE
WEEKDAYS: List[Tuple[str, str]]
NEPALI_MONTHS: Tuple[Tuple[str, str], ...]
TRANSLATION_MAP: Dict[str, Dict[str, str]]
FORMAT_MAP: Dict[str, Callable[[Any], Any]]


class NepaliDateMeta(type):
    @staticmethod
    def load_calendar() -> Dict[Any, Any]: ...
    def __init__(cls, what: Any, bases: Any = None, dict: Union[Dict[Any, Any], None] = None) -> Any:
        super().__init__(what, bases, dict)
        ...


class NepaliDate(metaclass=NepaliDateMeta):
    calendar_data: List[Any]
    min: 'NepaliDate'
    __year: int
    __month: int
    __day: int
    __lang: str

    def __init__(self, year: Union[int, str], month: Union[int, str], day: Union[int, str],
                 lang: str='eng') -> None: ...
    def __add__(self, other: datetime.timedelta) -> 'NepaliDate': ...
    def __eq__(self, other: 'NepaliDate') -> 'NepaliDate': ...
    def __format__(self, format_spec: str) -> str: ...
    def __lt__(self, other: 'NepaliDate') -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __sub__(self, other: 'NepaliDate') -> 'NepaliDate': ...
    @classmethod
    def strpdate(cls, string: str, fmt: str="%Y/%m/%d", lang: str='eng') -> 'NepaliDate': ...
    @classmethod
    def today(cls, lang: str='eng') -> 'NepaliDate': ...
    @property
    def day(self) -> int: ...
    @property
    def day_translated(self) -> str: ...
    @property
    def lang(self) -> str: ...
    @property
    def month(self) -> int: ...
    @property
    def month_translated(self) -> str: ...
    @property
    def weekday(self) -> str: ...
    @property
    def weekday_translated(self) -> str: ...
    @property
    def year(self) -> int: ...
    @property
    def year_translated(self) -> str: ...
    @day.setter
    def day(self, day: Union[str, int]) -> None: ...
    @lang.setter
    def lang(self, lang: str) -> None: ...
    @month.setter
    def month(self, month: Union[str, int]) -> None: ...
    @year.setter
    def year(self, year: Union[str, int]) -> None: ...
    @staticmethod
    def calendar(lang: str='eng', justify: int=4) -> None: ...
    @staticmethod
    def delta_with_reference_ad(date: datetime.date) -> datetime.timedelta: ...
    @staticmethod
    def to_nepali_date(date_ad: datetime.date, lang: str='eng') -> 'NepaliDate': ...
    @staticmethod
    def total_days(year: int) -> int: ...
    @staticmethod
    def translate(lang: str, string: str, to_translate: str='digits') -> str: ...
    def delta_with_reference_bs(self) -> datetime.timedelta: ...
    def isoformat(self) -> str: ...
    def strfdate(self, fmt: str) -> str: ...
    def to_english_date(self) -> datetime.date: ...
